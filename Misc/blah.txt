Block Number: 0
    0: BlockBegin
    1: PushNewCollection(array) 0,0,0,0 ()
    2: Push(lit) "Misc/claire_xx.txt"
    3: Append
    4: Push(lit) "Misc/claire_skips.txt"
    5: Append
    6: Push(lit) "Misc/dups.csv"
    7: Append
    8: Push @0,0,0 (args)
    9: LengthOf @0,0,0 (#)
    10: Push(lit) "3"
    11: <
    12: Jf *14
    13: Bl rtn=0:14 qual=[0, 1, 0, 0]
    14: J *15
    15: Alloc 0,0,1 (ls_file)
    16: Push @0,0,0 (args)
    17: Push(lit) "0"
    18: FetchIndexed @0,0,0 indices=1 (])
    19: Push(lit) "<"
    20: FunctionCall (Fopen) arg count=2 is_statement=0
    21: Update(update) 0,0,1 (ls_file)
    22: Alloc 0,0,2 (skips_match_list)
    23: PushNewCollection(array) 0,0,0,0 ([)
    24: Update(update) 0,0,2 (skips_match_list)
    25: Alloc 0,0,3 (skips_match_source)
    26: PushNewCollection(array) 0,0,0,0 ([)
    27: Update(update) 0,0,3 (skips_match_source)
    28: Alloc 0,0,4 (skip_file)
    29: Push @0,0,0 (args)
    30: Push(lit) "1"
    31: FetchIndexed @0,0,0 indices=1 (])
    32: Push(lit) "<"
    33: FunctionCall (Fopen) arg count=2 is_statement=0
    34: Update(update) 0,0,4 (skip_file)
    35: Push @0,0,4 (skip_file)
    36: FunctionCall (Feof) arg count=1 is_statement=0
    37: !
    38: Jf *41
    39: Bl rtn=0:40 qual=[1, 2, 0, 41]
    40: J *35
    41: Alloc 0,0,5 (file_line_capture)
    42: Push(lit) "^([-])([-\w@]+)\s+(\w+)\s+(\w+)\s+(\w+)\s+(\d+)\s+(\w+)\s+(\d+)\s+(\d+:\d+:\d+)\s+(\d{4})\s+(.*)"
    43: FunctionCall (Regex) arg count=1 is_statement=0
    44: Update(update) 0,0,5 (file_line_capture)
    45: Alloc 0,0,6 (directory_lines)
    46: PushNewCollection(array) 0,0,0,0 ([)
    47: Update(update) 0,0,6 (directory_lines)
    48: Push @0,0,1 (ls_file)
    49: Push @0,0,6 (directory_lines)
    50: FunctionCall (Fread) arg count=2 is_statement=1
    51: Pop
    52: Alloc 0,0,7 (count)
    53: Push(lit) "0"
    54: Update(update) 0,0,7 (count)
    55: Alloc 0,0,8 (dir_count)
    56: Push(lit) "0"
    57: Update(update) 0,0,8 (dir_count)
    58: Alloc 0,0,9 (current_directory)
    59: Push(lit) ""
    60: Update(update) 0,0,9 (current_directory)
    61: Alloc 0,0,10 (process_count)
    62: Push(lit) "0"
    63: Update(update) 0,0,10 (process_count)
    64: Alloc 0,0,11 (analyze_count)
    65: Push(lit) "0"
    66: Update(update) 0,0,11 (analyze_count)
    67: Alloc 0,0,12 (skip_count)
    68: Push(lit) "0"
    69: Update(update) 0,0,12 (skip_count)
    70: Alloc 0,0,13 (dups_hash)
    71: PushNewCollection(dict) 0,0,0,0 ()
    72: Update(update) 0,0,13 (dups_hash)
    73: Alloc 0,0,14 (month_name_to_number)
    74: PushNewCollection(dict) 0,0,0,0 ()
    75: Update(update) 0,0,14 (month_name_to_number)
    76: Push @0,0,14 (month_name_to_number)
    77: Push(lit) "Jan"
    78: Push(lit) "01"
    79: Push(lit) "false"
    80: FunctionCall (Insert) arg count=4 is_statement=1
    81: Pop
    82: Push @0,0,14 (month_name_to_number)
    83: Push(lit) "Feb"
    84: Push(lit) "02"
    85: Push(lit) "false"
    86: FunctionCall (Insert) arg count=4 is_statement=1
    87: Pop
    88: Push @0,0,14 (month_name_to_number)
    89: Push(lit) "Mar"
    90: Push(lit) "03"
    91: Push(lit) "false"
    92: FunctionCall (Insert) arg count=4 is_statement=1
    93: Pop
    94: Push @0,0,14 (month_name_to_number)
    95: Push(lit) "Apr"
    96: Push(lit) "04"
    97: Push(lit) "false"
    98: FunctionCall (Insert) arg count=4 is_statement=1
    99: Pop
    100: Push @0,0,14 (month_name_to_number)
    101: Push(lit) "May"
    102: Push(lit) "05"
    103: Push(lit) "false"
    104: FunctionCall (Insert) arg count=4 is_statement=1
    105: Pop
    106: Push @0,0,14 (month_name_to_number)
    107: Push(lit) "Jun"
    108: Push(lit) "06"
    109: Push(lit) "false"
    110: FunctionCall (Insert) arg count=4 is_statement=1
    111: Pop
    112: Push @0,0,14 (month_name_to_number)
    113: Push(lit) "Jul"
    114: Push(lit) "07"
    115: Push(lit) "false"
    116: FunctionCall (Insert) arg count=4 is_statement=1
    117: Pop
    118: Push @0,0,14 (month_name_to_number)
    119: Push(lit) "Aug"
    120: Push(lit) "08"
    121: Push(lit) "false"
    122: FunctionCall (Insert) arg count=4 is_statement=1
    123: Pop
    124: Push @0,0,14 (month_name_to_number)
    125: Push(lit) "Sep"
    126: Push(lit) "09"
    127: Push(lit) "false"
    128: FunctionCall (Insert) arg count=4 is_statement=1
    129: Pop
    130: Push @0,0,14 (month_name_to_number)
    131: Push(lit) "Oct"
    132: Push(lit) "10"
    133: Push(lit) "false"
    134: FunctionCall (Insert) arg count=4 is_statement=1
    135: Pop
    136: Push @0,0,14 (month_name_to_number)
    137: Push(lit) "Nov"
    138: Push(lit) "11"
    139: Push(lit) "false"
    140: FunctionCall (Insert) arg count=4 is_statement=1
    141: Pop
    142: Push @0,0,14 (month_name_to_number)
    143: Push(lit) "Dec"
    144: Push(lit) "12"
    145: Push(lit) "false"
    146: FunctionCall (Insert) arg count=4 is_statement=1
    147: Pop
    148: Alloc 0,0,15 (line)
    149: Alloc 0,0,16 ($temp13071)
    150: Push(lit) "0"
    151: Update(update) 0,0,16 ($temp13071)
    152: Push @0,0,16 ($temp13071)
    153: Push @0,0,6 (directory_lines)
    154: LengthOf @0,0,0 ()
    155: < @0,0,0 ()
    156: Jf *164
    157: Push @0,0,6 (directory_lines)
    158: Push @0,0,16 ($temp13071)
    159: FetchIndexed @0,0,16 ($temp13071)
    160: Update(update) 0,0,15 (line)
    161: Bl rtn=0:162 qual=[1, 4, 0, 164]
    162: Inc @0,0,16 ($temp13071)
    163: J *152
    164: Pop
    165: Alloc 0,0,16 (duplicate_count)
    166: Push @0,0,13 (dups_hash)
    167: Push @0,0,0 (args)
    168: Push(lit) "2"
    169: FetchIndexed @0,0,0 indices=1 (])
    170: FunctionCall (csv_out) arg count=2 is_statement=0
    171: Update(update) 0,0,16 (duplicate_count)
    172: Push(lit) "
total lines read from "
    173: Push @0,0,0 (args)
    174: Push(lit) "0"
    175: FetchIndexed @0,0,0 indices=1 (])
    176: Concat
    177: Push(lit) " = "
    178: Concat
    179: Push @0,0,6 (directory_lines)
    180: LengthOf @0,0,0 (#)
    181: Concat
    182: Eprintln
    183: Push(lit) "total entries processed = "
    184: Push @0,0,10 (process_count)
    185: Concat
    186: Eprintln
    187: Push(lit) "total entries analyzed = "
    188: Push @0,0,11 (analyze_count)
    189: Concat
    190: Eprintln
    191: Push(lit) "directories= "
    192: Push @0,0,8 (dir_count)
    193: Concat
    194: Eprintln
    195: Push(lit) "files duplicated in 2 or more directories = "
    196: Push @0,0,16 (duplicate_count)
    197: Concat
    198: Eprintln
    199: Push(lit) "files skipped = "
    200: Push @0,0,12 (skip_count)
    201: Concat
    202: Eprintln
    203: BlockEnd
Block Number: 1
    0: BlockBegin
    1: Push(lit) "Usage: dups <ls output file> <skips file> <csv file>"
    2: Println
    3: Push(lit) "1"
    4: Return
    5: BlockEnd
Block Number: 2
    0: BlockBegin
    1: Alloc 0,1,0 (skips_match_reg)
    2: Push @0,0,4 (skip_file)
    3: FunctionCall (Freadln) arg count=1 is_statement=0
    4: Update(update) 0,1,0 (skips_match_reg)
    5: Push @0,1,0 (skips_match_reg)
    6: LengthOf @0,0,0 (#)
    7: Push(lit) "0"
    8: >
    9: Jf *11
    10: Bl rtn=2:11 qual=[0, 3, 0, 0]
    11: J *12
    12: BlockEnd
Block Number: 3
    0: BlockBegin
    1: Push @0,1,0 (skips_match_reg)
    2: FunctionCall (Regex) arg count=1 is_statement=0
    3: AddEq(update) 0,0,2 (skips_match_list)
    4: BlockEnd
Block Number: 4
    0: BlockBegin
    1: Inc @0,0,10 (process_count)
    2: Push @0,0,15 (line)
    3: LengthOf @0,0,0 (#)
    4: Push(lit) "0"
    5: ==
    6: Jf *8
    7: Bl rtn=4:8 qual=[0, 5, 0, 0]
    8: J *9
    9: Inc @0,0,11 (analyze_count)
    10: Push @0,0,15 (line)
    11: Push(lit) "0"
    12: Push(lit) "1"
    13: FunctionCall (Substr) arg count=3 is_statement=0
    14: Push(lit) "/"
    15: ==
    16: Jf *18
    17: Bl rtn=4:18 qual=[0, 6, 0, 0]
    18: J *19
    19: Alloc 0,1,0 (file_capture)
    20: Push @0,0,15 (line)
    21: Push @0,0,5 (file_line_capture)
    22: Push(lit) "0"
    23: FunctionCall (Capture) arg count=3 is_statement=0
    24: Update(update) 0,1,0 (file_capture)
    25: Push @0,1,0 (file_capture)
    26: LengthOf @0,0,0 (#)
    27: Push(lit) "0"
    28: ==
    29: Jf *31
    30: Bl rtn=4:31 qual=[0, 7, 0, 0]
    31: J *32
    32: Push @0,1,0 (file_capture)
    33: Push(lit) "11"
    34: FetchIndexed @0,0,0 indices=1 (])
    35: Push @0,0,9 (current_directory)
    36: Concat
    37: Push @0,0,2 (skips_match_list)
    38: FunctionCall (skip_check) arg count=2 is_statement=0
    39: Jf *41
    40: Bl rtn=4:41 qual=[0, 8, 0, 0]
    41: J *42
    42: Alloc 0,1,1 (dups_key)
    43: Push @0,1,0 (file_capture)
    44: Push(lit) "11"
    45: FetchIndexed @0,0,0 indices=1 (])
    46: Push(lit) ";"
    47: Concat
    48: Push @0,1,0 (file_capture)
    49: Push(lit) "10"
    50: FetchIndexed @0,0,0 indices=1 (])
    51: Concat
    52: Push(lit) ";"
    53: Concat
    54: Push @0,0,14 (month_name_to_number)
    55: Push @0,1,0 (file_capture)
    56: Push(lit) "7"
    57: FetchIndexed @0,0,0 indices=1 (])
    58: FetchIndexed @0,0,0 indices=1 (])
    59: Concat
    60: Push(lit) ";"
    61: Concat
    62: Push @0,1,0 (file_capture)
    63: Push(lit) "8"
    64: FetchIndexed @0,0,0 indices=1 (])
    65: Concat
    66: Push(lit) ";"
    67: Concat
    68: Push @0,1,0 (file_capture)
    69: Push(lit) "9"
    70: FetchIndexed @0,0,0 indices=1 (])
    71: Concat
    72: Update(update) 0,1,1 (dups_key)
    73: Push @0,0,13 (dups_hash)
    74: Push @0,1,1 (dups_key)
    75: FunctionCall (Contains) arg count=2 is_statement=0
    76: Jf *79
    77: Bl rtn=4:78 qual=[0, 9, 0, 0]
    78: J *80
    79: Bl rtn=4:80 qual=[0, 10, 0, 0]
    80: BlockEnd
Block Number: 5
    0: BlockBegin
    1: Continue frame: 0 block:0 address:0
    2: BlockEnd
Block Number: 6
    0: BlockBegin
    1: Inc @0,0,8 (dir_count)
    2: Push @0,0,15 (line)
    3: Update(update) 0,0,9 (current_directory)
    4: Continue frame: 0 block:0 address:0
    5: BlockEnd
Block Number: 7
    0: BlockBegin
    1: Continue frame: 0 block:0 address:0
    2: BlockEnd
Block Number: 8
    0: BlockBegin
    1: Inc @0,0,12 (skip_count)
    2: Continue frame: 0 block:0 address:0
    3: BlockEnd
Block Number: 9
    0: BlockBegin
    1: Alloc 0,2,0 (dup)
    2: Push @0,0,13 (dups_hash)
    3: Push @0,1,1 (dups_key)
    4: FetchIndexed @0,0,0 indices=1 (])
    5: Update(update) 0,2,0 (dup)
    6: Push @0,0,9 (current_directory)
    7: AddEq(update) 0,2,0 (dup)
    8: Push @0,0,13 (dups_hash)
    9: Push @0,1,1 (dups_key)
    10: Push @0,2,0 (dup)
    11: Push(lit) "true"
    12: FunctionCall (Insert) arg count=4 is_statement=1
    13: Pop
    14: BlockEnd
Block Number: 10
    0: BlockBegin
    1: Alloc 0,2,0 (payload)
    2: PushNewCollection(array) 0,0,0,0 ()
    3: Push @0,0,9 (current_directory)
    4: Append
    5: Update(update) 0,2,0 (payload)
    6: Push @0,0,13 (dups_hash)
    7: Push @0,1,1 (dups_key)
    8: Push @0,2,0 (payload)
    9: Push(lit) "true"
    10: FunctionCall (Insert) arg count=4 is_statement=1
    11: Pop
    12: BlockEnd
Generated Code for Function skip_check
Block Number: 0
    0: BlockBegin
    1: Push ^1,0,0
    2: Push ^1,0,1
    3: Alloc 1,0,2 (regex_num)
    4: Push(lit) "0"
    5: Update(update) 1,0,2 (regex_num)
    6: Push @1,0,2 (regex_num)
    7: Push @1,0,1 (skips_match_list)
    8: LengthOf @1,0,0 (#)
    9: <
    10: Jf *13
    11: Bl rtn=0:12 qual=[1, 1, 0, 13]
    12: J *6
    13: Push(lit) "false"
    14: Return
    15: BlockEnd
Block Number: 1
    0: BlockBegin
    1: Alloc 1,1,0 (m)
    2: Push @1,0,0 (skip_haystack)
    3: Push @1,0,1 (skips_match_list)
    4: Push @1,0,2 (regex_num)
    5: FetchIndexed @1,0,0 indices=1 (])
    6: Push(lit) "0"
    7: FunctionCall (Match) arg count=3 is_statement=0
    8: Update(update) 1,1,0 (m)
    9: Push @1,1,0 (m)
    10: LengthOf @1,0,0 (#)
    11: Push(lit) "0"
    12: >
    13: Jf *15
    14: Bl rtn=1:15 qual=[0, 2, 0, 0]
    15: J *16
    16: Inc @1,0,2 (regex_num)
    17: BlockEnd
Block Number: 2
    0: BlockBegin
    1: Push(lit) "true"
    2: Return
    3: BlockEnd
Generated Code for Function csv_out
Block Number: 0
    0: BlockBegin
    1: Push ^2,0,0
    2: Push ^2,0,1
    3: Alloc 2,0,2 (csv_file)
    4: Push @2,0,1 (csv_output)
    5: Push(lit) ">"
    6: FunctionCall (Fopen) arg count=2 is_statement=0
    7: Update(update) 2,0,2 (csv_file)
    8: Alloc 2,0,3 (duplicate_count)
    9: Push(lit) "0"
    10: Update(update) 2,0,3 (duplicate_count)
    11: Alloc 2,0,4 (dup_keys)
    12: Push @2,0,0 (dups_hash)
    13: FunctionCall (Keys) arg count=1 is_statement=0
    14: Update(update) 2,0,4 (dup_keys)
    15: Push @2,0,4 (dup_keys)
    16: FunctionCall (Sort) arg count=1 is_statement=1
    17: Pop
    18: Alloc 2,0,5 (dup_key)
    19: Alloc 2,0,6 ($temp36785)
    20: Push(lit) "0"
    21: Update(update) 2,0,6 ($temp36785)
    22: Push @2,0,6 ($temp36785)
    23: Push @2,0,4 (dup_keys)
    24: LengthOf @2,0,0 ()
    25: < @2,0,0 ()
    26: Jf *34
    27: Push @2,0,4 (dup_keys)
    28: Push @2,0,6 ($temp36785)
    29: FetchIndexed @2,0,6 ($temp36785)
    30: Update(update) 2,0,5 (dup_key)
    31: Bl rtn=0:32 qual=[1, 1, 0, 34]
    32: Inc @2,0,6 ($temp36785)
    33: J *22
    34: Pop
    35: Push @2,0,3 (duplicate_count)
    36: Return
    37: BlockEnd
Block Number: 1
    0: BlockBegin
    1: Push @2,0,0 (dups_hash)
    2: Push @2,0,5 (dup_key)
    3: FetchIndexed @2,0,0 indices=1 (])
    4: LengthOf @2,0,0 (#)
    5: Push(lit) "1"
    6: >
    7: Jf *9
    8: Bl rtn=1:9 qual=[0, 2, 0, 0]
    9: J *10
    10: BlockEnd
Block Number: 2
    0: BlockBegin
    1: Inc @2,0,3 (duplicate_count)
    2: Alloc 2,2,0 (dup_out)
    3: Push @2,0,5 (dup_key)
    4: Push(lit) ";"
    5: FunctionCall (Split) arg count=2 is_statement=0
    6: Update(update) 2,2,0 (dup_out)
    7: Alloc 2,2,1 (dup_fn)
    8: Push @2,2,0 (dup_out)
    9: Push(lit) "0"
    10: FetchIndexed @2,0,0 indices=1 (])
    11: Update(update) 2,2,1 (dup_fn)
    12: Alloc 2,2,2 (dup_date)
    13: Push @2,2,0 (dup_out)
    14: Push(lit) "1"
    15: FetchIndexed @2,0,0 indices=1 (])
    16: Push(lit) " "
    17: Concat
    18: Push @2,2,0 (dup_out)
    19: Push(lit) "2"
    20: FetchIndexed @2,0,0 indices=1 (])
    21: Concat
    22: Push(lit) " "
    23: Concat
    24: Push @2,2,0 (dup_out)
    25: Push(lit) "3"
    26: FetchIndexed @2,0,0 indices=1 (])
    27: Concat
    28: Push(lit) " "
    29: Concat
    30: Push @2,2,0 (dup_out)
    31: Push(lit) "4"
    32: FetchIndexed @2,0,0 indices=1 (])
    33: Concat
    34: Update(update) 2,2,2 (dup_date)
    35: Alloc 2,2,3 (dup_line)
    36: PushNewCollection(array) 2,0,0,0 ()
    37: Push @2,2,1 (dup_fn)
    38: Append
    39: Push @2,2,2 (dup_date)
    40: Append
    41: Update(update) 2,2,3 (dup_line)
    42: Alloc 2,2,4 (dupdirs)
    43: Push @2,0,0 (dups_hash)
    44: Push @2,0,5 (dup_key)
    45: FetchIndexed @2,0,0 indices=1 (])
    46: Update(update) 2,2,4 (dupdirs)
    47: Push @2,2,4 (dupdirs)
    48: AddEq(update) 2,2,3 (dup_line)
    49: Push @2,0,2 (csv_file)
    50: Push @2,2,3 (dup_line)
    51: FunctionCall (Fwriteln) arg count=2 is_statement=1
    52: Pop
    53: BlockEnd
^C
carl@McTreehouse cpl % 
