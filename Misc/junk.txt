carl@McTreehouse cpl % cargo run --release allcplcode/cplpgms/dups.cpl Misc/claire_xx.txt Misc/claire_skips.txt Misc/claire_xx.csv -d9
    Finished `release` profile [optimized] target(s) in 0.01s
     Running `target/release/main allcplcode/cplpgms/dups.cpl Misc/claire_xx.txt Misc/claire_skips.txt Misc/claire_xx.csv -d9`
0:0 : exec_block_begin: BlockBegin block 0
0:1 : exec_push_new_collection: PushNewCollection(array) 0,0,0,0 () Mode: Array
0:2 : exec_push: Push(lit) "Misc/claire_xx.txt" Mode: Lit
     push_lit_string: Push(lit) "Misc/claire_xx.txt"
0:3 : exec_append: Append
      update_collection_array: 0 3
0:4 : exec_push: Push(lit) "Misc/claire_skips.txt" Mode: Lit
     push_lit_string: Push(lit) "Misc/claire_skips.txt"
0:5 : exec_append: Append
      update_collection_array: 0 5
0:6 : exec_push: Push(lit) "Misc/claire_xx.csv" Mode: Lit
     push_lit_string: Push(lit) "Misc/claire_xx.csv"
0:7 : exec_append: Append
      update_collection_array: 0 7
0:8 : exec_push: Push @0,0,0 (args) Mode: Var
      push_copy(mode=Var) Push @0,0,0 (args)
0:9 : exec_length_of
0:10 : exec_push: Push(lit) "3" Mode: Lit
      push_lit_number: Push(lit) "3"
0:11 : exec_binary_operator(<): (tos1=CplNumber(3) tos2=CplNumber(3))
0:12 : exec_jf: Jf *14
0:14 : exec_j: J *15
0:15 : exec_alloc: Alloc 0,0,1 (ls_file)
0:16 : exec_push: Push @0,0,0 (args) Mode: Var
      push_copy(mode=Var) Push @0,0,0 (args)
0:17 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
0:18 : exec_fetch_indexed: FetchIndexed @0,0,0 indices=1 (])
0:19 : exec_push: Push(lit) "<" Mode: Lit
     push_lit_string: Push(lit) "<"
0:20 : exec_function_call: FunctionCall (Fopen) arg count=2 is_statement=0
      return from Builtin "Fopen" rslt=0
0:21 : exec_update: Update(update) 0,0,1 (ls_file)
      update_scalar_tos: 0,1 0
0:22 : exec_alloc: Alloc 0,0,2 (skips_match_list)
0:23 : exec_push_new_collection: PushNewCollection(array) 0,0,0,0 ([) Mode: Array
0:24 : exec_update: Update(update) 0,0,2 (skips_match_list)
      update_scalar_tos: 0,2 VarRef: 0,0,2
0:25 : exec_alloc: Alloc 0,0,3 (skips_match_source)
0:26 : exec_push_new_collection: PushNewCollection(array) 0,0,0,0 ([) Mode: Array
0:27 : exec_update: Update(update) 0,0,3 (skips_match_source)
      update_scalar_tos: 0,3 VarRef: 0,0,3
0:28 : exec_alloc: Alloc 0,0,4 (skip_file)
0:29 : exec_push: Push @0,0,0 (args) Mode: Var
      push_copy(mode=Var) Push @0,0,0 (args)
0:30 : exec_push: Push(lit) "1" Mode: Lit
      push_lit_number: Push(lit) "1"
0:31 : exec_fetch_indexed: FetchIndexed @0,0,0 indices=1 (])
0:32 : exec_push: Push(lit) "<" Mode: Lit
     push_lit_string: Push(lit) "<"
0:33 : exec_function_call: FunctionCall (Fopen) arg count=2 is_statement=0
      return from Builtin "Fopen" rslt=1
0:34 : exec_update: Update(update) 0,0,4 (skip_file)
      update_scalar_tos: 0,4 1
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=.*\.o/|.*\.bin|.*\.d/|.*\.rlib|.*\.rmeta|.*\.lock
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 .*\.o/|.*\.bin|.*\.d/|.*\.rlib|.*\.rmeta|.*\.lock
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(49) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=0
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=/Users/clairehesselholt/Library/
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 /Users/clairehesselholt/Library/
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(32) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=1
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=.*invoked\.timestamp
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 .*invoked\.timestamp
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(20) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=2
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=InfoPlist\.strings
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 InfoPlist\.strings
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(18) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=3
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=/debug
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 /debug
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(6) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=4
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=/release/build
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 /release/build
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(14) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=5
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.Trash
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.Trash
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(7) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=6
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=^\.
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 ^\.
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(3) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=7
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=Creative Cloud Files
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 Creative Cloud Files
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(20) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=8
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=Entourage Script Menu Items
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 Entourage Script Menu Items
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(27) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=9
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=Documents/Microsoft User Data
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 Documents/Microsoft User Data
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(29) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=10
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=Thumbnail.info
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 Thumbnail.info
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(14) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=11
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=Flash Player\.app/
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 Flash Player\.app/
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(18) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=12
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=/Users/clairehesselholt/Library/
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 /Users/clairehesselholt/Library/
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(32) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=13
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=iTunes/Album Artwork
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 iTunes/Album Artwork
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(20) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=14
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=/Flash Player Debugger\.app
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 /Flash Player Debugger\.app
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(27) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=15
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=/Lightroom/Lightroom Catalog
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 /Lightroom/Lightroom Catalog
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(28) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=16
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=Pictures/Photos Library 2\.photoslibrary
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 Pictures/Photos Library 2\.photoslibrary
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(40) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=17
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=photoslibrary/Thumbnails
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 photoslibrary/Thumbnails
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(24) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=18
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=Master Photos/Photos/photos2/iphone /Photos Library.photoslibrary/resources/recovery/
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 Master Photos/Photos/photos2/iphone /Photos Library.photoslibrary/resources/recovery/
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(85) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=19
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.lisj
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.lisj
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(6) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=20
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=Pictures/Lightroom Library.lrlibrary
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 Pictures/Lightroom Library.lrlibrary
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(36) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=21
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=thumb_IMG
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 thumb_IMG
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(9) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=22
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=com\.apple
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 com\.apple
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(10) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=23
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=/Downloads
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 /Downloads
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(10) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=24
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=Desktop\.ini
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 Desktop\.ini
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(12) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=25
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=desktop.ini
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 desktop.ini
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(11) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=26
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.ipa
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.ipa
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(5) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=27
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.m4a
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.m4a
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(5) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=28
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.m4p
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.m4p
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(5) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=29
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.apalbum
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.apalbum
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(9) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=30
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.apdb
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.apdb
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(6) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=31
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.apfolder
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.apfolder
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(10) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=32
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.itdb
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.itdb
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(6) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=33
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.itl
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.itl
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(5) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=34
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.apmaster
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.apmaster
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(10) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=35
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=\.apversion
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 \.apversion
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(11) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
3:10 : exec_bl: Bl rtn=2:11 qual=[0, 3, 0, 0]
3:0 : exec_block_begin: BlockBegin block 2
3:1 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
3:2 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=36
3:3 : exec_assignment_operator: AddEq(update) 0,0,2 (skips_match_list)
3:4 : exec_block_end: 3 returning to: 2:11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=false
0:38 : exec_jf: Jf *41
2:39 : exec_bl: Bl rtn=0:40 qual=[1, 2, 0, 41]
2:0 : exec_block_begin: BlockBegin block 1
2:1 : exec_alloc: Alloc 0,1,0 (skips_match_reg)
2:2 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
2:3 : exec_function_call: FunctionCall (Freadln) arg count=1 is_statement=0
      return from Builtin "Freadln" rslt=
2:4 : exec_update: Update(update) 0,1,0 (skips_match_reg)
      update_scalar_tos: 1,0 
2:5 : exec_push: Push @0,1,0 (skips_match_reg) Mode: Var
      push_copy(mode=Var) Push @0,1,0 (skips_match_reg)
2:6 : exec_length_of
2:7 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
2:8 : exec_binary_operator(>): (tos1=CplNumber(0) tos2=CplNumber(0))
2:9 : exec_jf: Jf *11
2:11 : exec_j: J *12
2:12 : exec_block_end: 2 returning to: 0:40
0:40 : exec_j: J *35
0:35 : exec_push: Push @0,0,4 (skip_file) Mode: Var
      push_copy(mode=Var) Push @0,0,4 (skip_file)
0:36 : exec_function_call: FunctionCall (Feof) arg count=1 is_statement=0
      return from Builtin "Feof" rslt=true
0:38 : exec_jf: Jf *41
0:41 : exec_alloc: Alloc 0,0,5 (file_line_capture)
0:42 : exec_push: Push(lit) "^([-])([-\w@]+)\s+(\w+)\s+(\w+)\s+(\w+)\s+(\d+)\s+(\w+)\s+(\d+)\s+(\d+:\d+:\d+)\s+(\d{4})\s+(.*)" Mode: Lit
     push_lit_string: Push(lit) "^([-])([-\w@]+)\s+(\w+)\s+(\w+)\s+(\w+)\s+(\d+)\s+(\w+)\s+(\d+)\s+(\d+:\d+:\d+)\s+(\d{4})\s+(.*)"
0:43 : exec_function_call: FunctionCall (Regex) arg count=1 is_statement=0
      return from Builtin "Regex" rslt=37
0:44 : exec_update: Update(update) 0,0,5 (file_line_capture)
      update_scalar_tos: 0,5 37
0:45 : exec_alloc: Alloc 0,0,6 (directory_lines)
0:46 : exec_push_new_collection: PushNewCollection(array) 0,0,0,0 ([) Mode: Array
0:47 : exec_update: Update(update) 0,0,6 (directory_lines)
      update_scalar_tos: 0,6 VarRef: 0,0,6
0:48 : exec_push: Push @0,0,1 (ls_file) Mode: Var
      push_copy(mode=Var) Push @0,0,1 (ls_file)
0:49 : exec_push: Push @0,0,6 (directory_lines) Mode: Var
      push_copy(mode=Var) Push @0,0,6 (directory_lines)
0:50 : exec_function_call: FunctionCall (Fread) arg count=2 is_statement=1
      return from Builtin "Fread" rslt=true
0:51 : exec_pop: Pop
0:52 : exec_alloc: Alloc 0,0,7 (count)
0:53 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
0:54 : exec_update: Update(update) 0,0,7 (count)
      update_scalar_tos: 0,7 0
0:55 : exec_alloc: Alloc 0,0,8 (dir_count)
0:56 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
0:57 : exec_update: Update(update) 0,0,8 (dir_count)
      update_scalar_tos: 0,8 0
0:58 : exec_alloc: Alloc 0,0,9 (current_directory)
0:59 : exec_push: Push(lit) "" Mode: Lit
     push_lit_string: Push(lit) ""
0:60 : exec_update: Update(update) 0,0,9 (current_directory)
      update_scalar_tos: 0,9 
0:61 : exec_alloc: Alloc 0,0,10 (process_count)
0:62 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
0:63 : exec_update: Update(update) 0,0,10 (process_count)
      update_scalar_tos: 0,10 0
0:64 : exec_alloc: Alloc 0,0,11 (analyze_count)
0:65 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
0:66 : exec_update: Update(update) 0,0,11 (analyze_count)
      update_scalar_tos: 0,11 0
0:67 : exec_alloc: Alloc 0,0,12 (skip_count)
0:68 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
0:69 : exec_update: Update(update) 0,0,12 (skip_count)
      update_scalar_tos: 0,12 0
0:70 : exec_alloc: Alloc 0,0,13 (dups_hash)
0:71 : exec_push_new_collection: PushNewCollection(dict) 0,0,0,0 () Mode: Dict
0:72 : exec_update: Update(update) 0,0,13 (dups_hash)
      update_scalar_tos: 0,13 VarRef: 0,0,13
0:73 : exec_alloc: Alloc 0,0,14 (month_name_to_number)
0:74 : exec_push_new_collection: PushNewCollection(dict) 0,0,0,0 () Mode: Dict
0:75 : exec_update: Update(update) 0,0,14 (month_name_to_number)
      update_scalar_tos: 0,14 VarRef: 0,0,14
0:76 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:77 : exec_push: Push(lit) "Jan" Mode: Lit
     push_lit_string: Push(lit) "Jan"
0:78 : exec_push: Push(lit) "01" Mode: Lit
     push_lit_string: Push(lit) "01"
0:79 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:80 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:81 : exec_pop: Pop
0:82 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:83 : exec_push: Push(lit) "Feb" Mode: Lit
     push_lit_string: Push(lit) "Feb"
0:84 : exec_push: Push(lit) "02" Mode: Lit
     push_lit_string: Push(lit) "02"
0:85 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:86 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:87 : exec_pop: Pop
0:88 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:89 : exec_push: Push(lit) "Mar" Mode: Lit
     push_lit_string: Push(lit) "Mar"
0:90 : exec_push: Push(lit) "03" Mode: Lit
     push_lit_string: Push(lit) "03"
0:91 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:92 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:93 : exec_pop: Pop
0:94 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:95 : exec_push: Push(lit) "Apr" Mode: Lit
     push_lit_string: Push(lit) "Apr"
0:96 : exec_push: Push(lit) "04" Mode: Lit
     push_lit_string: Push(lit) "04"
0:97 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:98 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:99 : exec_pop: Pop
0:100 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:101 : exec_push: Push(lit) "May" Mode: Lit
     push_lit_string: Push(lit) "May"
0:102 : exec_push: Push(lit) "05" Mode: Lit
     push_lit_string: Push(lit) "05"
0:103 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:104 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:105 : exec_pop: Pop
0:106 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:107 : exec_push: Push(lit) "Jun" Mode: Lit
     push_lit_string: Push(lit) "Jun"
0:108 : exec_push: Push(lit) "06" Mode: Lit
     push_lit_string: Push(lit) "06"
0:109 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:110 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:111 : exec_pop: Pop
0:112 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:113 : exec_push: Push(lit) "Jul" Mode: Lit
     push_lit_string: Push(lit) "Jul"
0:114 : exec_push: Push(lit) "07" Mode: Lit
     push_lit_string: Push(lit) "07"
0:115 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:116 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:117 : exec_pop: Pop
0:118 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:119 : exec_push: Push(lit) "Aug" Mode: Lit
     push_lit_string: Push(lit) "Aug"
0:120 : exec_push: Push(lit) "08" Mode: Lit
     push_lit_string: Push(lit) "08"
0:121 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:122 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:123 : exec_pop: Pop
0:124 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:125 : exec_push: Push(lit) "Sep" Mode: Lit
     push_lit_string: Push(lit) "Sep"
0:126 : exec_push: Push(lit) "09" Mode: Lit
     push_lit_string: Push(lit) "09"
0:127 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:128 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:129 : exec_pop: Pop
0:130 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:131 : exec_push: Push(lit) "Oct" Mode: Lit
     push_lit_string: Push(lit) "Oct"
0:132 : exec_push: Push(lit) "10" Mode: Lit
     push_lit_string: Push(lit) "10"
0:133 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:134 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:135 : exec_pop: Pop
0:136 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:137 : exec_push: Push(lit) "Nov" Mode: Lit
     push_lit_string: Push(lit) "Nov"
0:138 : exec_push: Push(lit) "11" Mode: Lit
     push_lit_string: Push(lit) "11"
0:139 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:140 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:141 : exec_pop: Pop
0:142 : exec_push: Push @0,0,14 (month_name_to_number) Mode: Var
      push_copy(mode=Var) Push @0,0,14 (month_name_to_number)
0:143 : exec_push: Push(lit) "Dec" Mode: Lit
     push_lit_string: Push(lit) "Dec"
0:144 : exec_push: Push(lit) "12" Mode: Lit
     push_lit_string: Push(lit) "12"
0:145 : exec_push: Push(lit) "false" Mode: Lit
0:0 : push_lit_bool: Push(lit) "false"
0:0 : push_lit_bool_help: Push(lit) "false"
0:146 : exec_function_call: FunctionCall (Insert) arg count=4 is_statement=1
      return from Builtin "Insert" rslt=Uninitialized
0:147 : exec_pop: Pop
0:148 : exec_alloc: Alloc 0,0,15 (line)
0:149 : exec_alloc: Alloc 0,0,16 ($temp60960)
0:150 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
0:151 : exec_update: Update(update) 0,0,16 ($temp60960)
      update_scalar_tos: 0,16 0
0:152 : exec_foreach: Foreach target: 0,15 collection: 0,6 index: 0,16 exit: 155
4:153 : exec_bl: Bl rtn=0:154 qual=[1, 4, 0, 156]
4:0 : exec_block_begin: BlockBegin block 1
4:1 : exec_inc_dec: Inc @0,0,10 (process_count)
4:2 : exec_push: Push @0,0,15 (line) Mode: Var
      push_copy(mode=Var) Push @0,0,15 (line)
4:3 : exec_length_of
4:4 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
4:5 : exec_binary_operator(==): (tos1=CplNumber(1) tos2=CplNumber(0))
4:6 : exec_jf: Jf *8
4:8 : exec_j: J *9
4:9 : exec_inc_dec: Inc @0,0,11 (analyze_count)
4:10 : exec_push: Push @0,0,15 (line) Mode: Var
      push_copy(mode=Var) Push @0,0,15 (line)
4:11 : exec_push: Push(lit) "0" Mode: Lit
      push_lit_number: Push(lit) "0"
4:12 : exec_push: Push(lit) "1" Mode: Lit
      push_lit_number: Push(lit) "1"
4:13 : exec_function_call: FunctionCall (Substr) arg count=3 is_statement=0
thread 'main' panicked at cplvar/../allsources/cplvar.rs:1129:18:
From CplVar.as_string: Var is not a string, it's a CplUninitialized
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
carl@McTreehouse cpl % 



carl@McTreehouse cpl % cargo run --release allcplcode/cplpgms/dups.cpl Misc/claire_xx.txt Misc/claire_skips.txt Misc/claire_xx.csv -d22
    Finished `release` profile [optimized] target(s) in 0.01s
     Running `target/release/main allcplcode/cplpgms/dups.cpl Misc/claire_xx.txt Misc/claire_skips.txt Misc/claire_xx.csv -d22`
Dump is Builtin
Substr is Builtin
Type is Builtin
Locate is Builtin
Replace is Builtin
Match is Builtin
Capture is Builtin
Split is Builtin
Regex is Builtin
Length is Builtin
Keys is Builtin
Sort is Builtin
Push is Builtin
Pop is Builtin
Insert is Builtin
Delete is Builtin
Contains is Builtin
Append is Builtin
Fopen is Builtin
Fread is Builtin
Freadln is Builtin
Fwrite is Builtin
Fwriteln is Builtin
Feof is Builtin
Generated Code for Function dup
Block Number: 0
    0: BlockBegin
    1: PushNewCollection(array) 0,0,0,0 ()
    2: Push(lit) "Misc/claire_xx.txt"
    3: Append
    4: Push(lit) "Misc/claire_skips.txt"
    5: Append
    6: Push(lit) "Misc/claire_xx.csv"
    7: Append
    8: Push @0,0,0 (args)
    9: LengthOf @0,0,0 (#)
    10: Push(lit) "3"
    11: <
    12: Jf *14
    13: Bl rtn=0:14 qual=[0, 1, 0, 0]
    14: J *15
    15: Alloc 0,0,1 (ls_file)
    16: Push @0,0,0 (args)
    17: Push(lit) "0"
    18: FetchIndexed @0,0,0 indices=1 (])
    19: Push(lit) "<"
    20: FunctionCall (Fopen) arg count=2 is_statement=0
    21: Update(update) 0,0,1 (ls_file)
    22: Alloc 0,0,2 (skips_match_list)
    23: PushNewCollection(array) 0,0,0,0 ([)
    24: Update(update) 0,0,2 (skips_match_list)
    25: Alloc 0,0,3 (skips_match_source)
    26: PushNewCollection(array) 0,0,0,0 ([)
    27: Update(update) 0,0,3 (skips_match_source)
    28: Alloc 0,0,4 (skip_file)
    29: Push @0,0,0 (args)
    30: Push(lit) "1"
    31: FetchIndexed @0,0,0 indices=1 (])
    32: Push(lit) "<"
    33: FunctionCall (Fopen) arg count=2 is_statement=0
    34: Update(update) 0,0,4 (skip_file)
    35: Push @0,0,4 (skip_file)
    36: FunctionCall (Feof) arg count=1 is_statement=0
    37: !
    38: Jf *41
    39: Bl rtn=0:40 qual=[1, 2, 0, 41]
    40: J *35
    41: Alloc 0,0,5 (file_line_capture)
    42: Push(lit) "^([-])([-\w@]+)\s+(\w+)\s+(\w+)\s+(\w+)\s+(\d+)\s+(\w+)\s+(\d+)\s+(\d+:\d+:\d+)\s+(\d{4})\s+(.*)"
    43: FunctionCall (Regex) arg count=1 is_statement=0
    44: Update(update) 0,0,5 (file_line_capture)
    45: Alloc 0,0,6 (directory_lines)
    46: PushNewCollection(array) 0,0,0,0 ([)
    47: Update(update) 0,0,6 (directory_lines)
    48: Push @0,0,1 (ls_file)
    49: Push @0,0,6 (directory_lines)
    50: FunctionCall (Fread) arg count=2 is_statement=1
    51: Pop
    52: Alloc 0,0,7 (count)
    53: Push(lit) "0"
    54: Update(update) 0,0,7 (count)
    55: Alloc 0,0,8 (dir_count)
    56: Push(lit) "0"
    57: Update(update) 0,0,8 (dir_count)
    58: Alloc 0,0,9 (current_directory)
    59: Push(lit) ""
    60: Update(update) 0,0,9 (current_directory)
    61: Alloc 0,0,10 (process_count)
    62: Push(lit) "0"
    63: Update(update) 0,0,10 (process_count)
    64: Alloc 0,0,11 (analyze_count)
    65: Push(lit) "0"
    66: Update(update) 0,0,11 (analyze_count)
    67: Alloc 0,0,12 (skip_count)
    68: Push(lit) "0"
    69: Update(update) 0,0,12 (skip_count)
    70: Alloc 0,0,13 (dups_hash)
    71: PushNewCollection(dict) 0,0,0,0 ()
    72: Update(update) 0,0,13 (dups_hash)
    73: Alloc 0,0,14 (month_name_to_number)
    74: PushNewCollection(dict) 0,0,0,0 ()
    75: Update(update) 0,0,14 (month_name_to_number)
    76: Push @0,0,14 (month_name_to_number)
    77: Push(lit) "Jan"
    78: Push(lit) "01"
    79: Push(lit) "false"
    80: FunctionCall (Insert) arg count=4 is_statement=1
    81: Pop
    82: Push @0,0,14 (month_name_to_number)
    83: Push(lit) "Feb"
    84: Push(lit) "02"
    85: Push(lit) "false"
    86: FunctionCall (Insert) arg count=4 is_statement=1
    87: Pop
    88: Push @0,0,14 (month_name_to_number)
    89: Push(lit) "Mar"
    90: Push(lit) "03"
    91: Push(lit) "false"
    92: FunctionCall (Insert) arg count=4 is_statement=1
    93: Pop
    94: Push @0,0,14 (month_name_to_number)
    95: Push(lit) "Apr"
    96: Push(lit) "04"
    97: Push(lit) "false"
    98: FunctionCall (Insert) arg count=4 is_statement=1
    99: Pop
    100: Push @0,0,14 (month_name_to_number)
    101: Push(lit) "May"
    102: Push(lit) "05"
    103: Push(lit) "false"
    104: FunctionCall (Insert) arg count=4 is_statement=1
    105: Pop
    106: Push @0,0,14 (month_name_to_number)
    107: Push(lit) "Jun"
    108: Push(lit) "06"
    109: Push(lit) "false"
    110: FunctionCall (Insert) arg count=4 is_statement=1
    111: Pop
    112: Push @0,0,14 (month_name_to_number)
    113: Push(lit) "Jul"
    114: Push(lit) "07"
    115: Push(lit) "false"
    116: FunctionCall (Insert) arg count=4 is_statement=1
    117: Pop
    118: Push @0,0,14 (month_name_to_number)
    119: Push(lit) "Aug"
    120: Push(lit) "08"
    121: Push(lit) "false"
    122: FunctionCall (Insert) arg count=4 is_statement=1
    123: Pop
    124: Push @0,0,14 (month_name_to_number)
    125: Push(lit) "Sep"
    126: Push(lit) "09"
    127: Push(lit) "false"
    128: FunctionCall (Insert) arg count=4 is_statement=1
    129: Pop
    130: Push @0,0,14 (month_name_to_number)
    131: Push(lit) "Oct"
    132: Push(lit) "10"
    133: Push(lit) "false"
    134: FunctionCall (Insert) arg count=4 is_statement=1
    135: Pop
    136: Push @0,0,14 (month_name_to_number)
    137: Push(lit) "Nov"
    138: Push(lit) "11"
    139: Push(lit) "false"
    140: FunctionCall (Insert) arg count=4 is_statement=1
    141: Pop
    142: Push @0,0,14 (month_name_to_number)
    143: Push(lit) "Dec"
    144: Push(lit) "12"
    145: Push(lit) "false"
    146: FunctionCall (Insert) arg count=4 is_statement=1
    147: Pop
    148: Alloc 0,0,15 (line)
    149: Alloc 0,0,16 ($temp19705)
    150: Push(lit) "0"
    151: Update(update) 0,0,16 ($temp19705)
    152: Foreach target: 0,15 collection: 0,6 index: 0,16 exit: 155
    153: Bl rtn=0:154 qual=[1, 4, 0, 156]
    154: J *152
    155: Pop
    156: Alloc 0,0,16 (duplicate_count)
    157: Push @0,0,13 (dups_hash)
    158: Push @0,0,0 (args)
    159: Push(lit) "2"
    160: FetchIndexed @0,0,0 indices=1 (])
    161: FunctionCall (csv_out) arg count=2 is_statement=0
    162: Update(update) 0,0,16 (duplicate_count)
    163: Push(lit) "
total lines read from "
    164: Push @0,0,0 (args)
    165: Push(lit) "0"
    166: FetchIndexed @0,0,0 indices=1 (])
    167: Concat
    168: Push(lit) " = "
    169: Concat
    170: Push @0,0,6 (directory_lines)
    171: LengthOf @0,0,0 (#)
    172: Concat
    173: Eprintln
    174: Push(lit) "total entries processed = "
    175: Push @0,0,10 (process_count)
    176: Concat
    177: Eprintln
    178: Push(lit) "total entries analyzed = "
    179: Push @0,0,11 (analyze_count)
    180: Concat
    181: Eprintln
    182: Push(lit) "directories= "
    183: Push @0,0,8 (dir_count)
    184: Concat
    185: Eprintln
    186: Push(lit) "files duplicated in 2 or more directories = "
    187: Push @0,0,16 (duplicate_count)
    188: Concat
    189: Eprintln
    190: Push(lit) "files skipped = "
    191: Push @0,0,12 (skip_count)
    192: Concat
    193: Eprintln
    194: BlockEnd
Block Number: 1
    0: BlockBegin
    1: Push(lit) "Usage: dups <ls output file> <skips file> <csv file>"
    2: Println
    3: Push(lit) "1"
    4: Return
    5: BlockEnd
Block Number: 2
    0: BlockBegin
    1: Alloc 0,1,0 (skips_match_reg)
    2: Push @0,0,4 (skip_file)
    3: FunctionCall (Freadln) arg count=1 is_statement=0
    4: Update(update) 0,1,0 (skips_match_reg)
    5: Push @0,1,0 (skips_match_reg)
    6: LengthOf @0,0,0 (#)
    7: Push(lit) "0"
    8: >
    9: Jf *11
    10: Bl rtn=2:11 qual=[0, 3, 0, 0]
    11: J *12
    12: BlockEnd
Block Number: 3
    0: BlockBegin
    1: Push @0,1,0 (skips_match_reg)
    2: FunctionCall (Regex) arg count=1 is_statement=0
    3: AddEq(update) 0,0,2 (skips_match_list)
    4: BlockEnd
Block Number: 4
    0: BlockBegin
    1: Inc @0,0,10 (process_count)
    2: Push @0,0,15 (line)
    3: LengthOf @0,0,0 (#)
    4: Push(lit) "0"
    5: ==
    6: Jf *8
    7: Bl rtn=4:8 qual=[0, 5, 0, 0]
    8: J *9
    9: Inc @0,0,11 (analyze_count)
    10: Push @0,0,15 (line)
    11: Push(lit) "0"
    12: Push(lit) "1"
    13: FunctionCall (Substr) arg count=3 is_statement=0
    14: Push(lit) "/"
    15: ==
    16: Jf *18
    17: Bl rtn=4:18 qual=[0, 6, 0, 0]
    18: J *19
    19: Alloc 0,1,0 (file_capture)
    20: Push @0,0,15 (line)
    21: Push @0,0,5 (file_line_capture)
    22: Push(lit) "0"
    23: FunctionCall (Capture) arg count=3 is_statement=0
    24: Update(update) 0,1,0 (file_capture)
    25: Push @0,1,0 (file_capture)
    26: LengthOf @0,0,0 (#)
    27: Push(lit) "0"
    28: ==
    29: Jf *31
    30: Bl rtn=4:31 qual=[0, 7, 0, 0]
    31: J *32
    32: Push @0,1,0 (file_capture)
    33: Push(lit) "11"
    34: FetchIndexed @0,0,0 indices=1 (])
    35: Push @0,0,9 (current_directory)
    36: Concat
    37: Push @0,0,2 (skips_match_list)
    38: FunctionCall (skip_check) arg count=2 is_statement=0
    39: Jf *41
    40: Bl rtn=4:41 qual=[0, 8, 0, 0]
    41: J *42
    42: Alloc 0,1,1 (dups_key)
    43: Push @0,1,0 (file_capture)
    44: Push(lit) "11"
    45: FetchIndexed @0,0,0 indices=1 (])
    46: Push(lit) ";"
    47: Concat
    48: Push @0,1,0 (file_capture)
    49: Push(lit) "10"
    50: FetchIndexed @0,0,0 indices=1 (])
    51: Concat
    52: Push(lit) ";"
    53: Concat
    54: Push @0,0,14 (month_name_to_number)
    55: Push @0,1,0 (file_capture)
    56: Push(lit) "7"
    57: FetchIndexed @0,0,0 indices=1 (])
    58: FetchIndexed @0,0,0 indices=1 (])
    59: Concat
    60: Push(lit) ";"
    61: Concat
    62: Push @0,1,0 (file_capture)
    63: Push(lit) "8"
    64: FetchIndexed @0,0,0 indices=1 (])
    65: Concat
    66: Push(lit) ";"
    67: Concat
    68: Push @0,1,0 (file_capture)
    69: Push(lit) "9"
    70: FetchIndexed @0,0,0 indices=1 (])
    71: Concat
    72: Update(update) 0,1,1 (dups_key)
    73: Push @0,0,13 (dups_hash)
    74: Push @0,1,1 (dups_key)
    75: FunctionCall (Contains) arg count=2 is_statement=0
    76: Jf *79
    77: Bl rtn=4:78 qual=[0, 9, 0, 0]
    78: J *80
    79: Bl rtn=4:80 qual=[0, 10, 0, 0]
    80: BlockEnd
Block Number: 5
    0: BlockBegin
    1: Continue frame: 0 block:0 address:0
    2: BlockEnd
Block Number: 6
    0: BlockBegin
    1: Inc @0,0,8 (dir_count)
    2: Push @0,0,15 (line)
    3: Update(update) 0,0,9 (current_directory)
    4: Continue frame: 0 block:0 address:0
    5: BlockEnd
Block Number: 7
    0: BlockBegin
    1: Continue frame: 0 block:0 address:0
    2: BlockEnd
Block Number: 8
    0: BlockBegin
    1: Inc @0,0,12 (skip_count)
    2: Continue frame: 0 block:0 address:0
    3: BlockEnd
Block Number: 9
    0: BlockBegin
    1: Alloc 0,2,0 (dup)
    2: Push @0,0,13 (dups_hash)
    3: Push @0,1,1 (dups_key)
    4: FetchIndexed @0,0,0 indices=1 (])
    5: Update(update) 0,2,0 (dup)
    6: Push @0,0,9 (current_directory)
    7: AddEq(update) 0,2,0 (dup)
    8: Push @0,0,13 (dups_hash)
    9: Push @0,1,1 (dups_key)
    10: Push @0,2,0 (dup)
    11: Push(lit) "true"
    12: FunctionCall (Insert) arg count=4 is_statement=1
    13: Pop
    14: BlockEnd
Block Number: 10
    0: BlockBegin
    1: Alloc 0,2,0 (payload)
    2: PushNewCollection(array) 0,0,0,0 ()
    3: Push @0,0,9 (current_directory)
    4: Append
    5: Update(update) 0,2,0 (payload)
    6: Push @0,0,13 (dups_hash)
    7: Push @0,1,1 (dups_key)
    8: Push @0,2,0 (payload)
    9: Push(lit) "true"
    10: FunctionCall (Insert) arg count=4 is_statement=1
    11: Pop
    12: BlockEnd
Generated Code for Function skip_check
Block Number: 0
    0: BlockBegin
    1: Push ^1,0,0
    2: Push ^1,0,1
    3: Alloc 1,0,2 (regex_num)
    4: Push(lit) "0"
    5: Update(update) 1,0,2 (regex_num)
    6: Push @1,0,2 (regex_num)
    7: Push @1,0,1 (skips_match_list)
    8: LengthOf @1,0,0 (#)
    9: <
    10: Jf *13
    11: Bl rtn=0:12 qual=[1, 1, 0, 13]
    12: J *6
    13: Push(lit) "false"
    14: Return
    15: BlockEnd
Block Number: 1
    0: BlockBegin
    1: Alloc 1,1,0 (m)
    2: Push @1,0,0 (skip_haystack)
    3: Push @1,0,1 (skips_match_list)
    4: Push @1,0,2 (regex_num)
    5: FetchIndexed @1,0,0 indices=1 (])
    6: Push(lit) "0"
    7: FunctionCall (Match) arg count=3 is_statement=0
    8: Update(update) 1,1,0 (m)
    9: Push @1,1,0 (m)
    10: LengthOf @1,0,0 (#)
    11: Push(lit) "0"
    12: >
    13: Jf *15
    14: Bl rtn=1:15 qual=[0, 2, 0, 0]
    15: J *16
    16: Inc @1,0,2 (regex_num)
    17: BlockEnd
Block Number: 2
    0: BlockBegin
    1: Push(lit) "true"
    2: Return
    3: BlockEnd
Generated Code for Function csv_out
Block Number: 0
    0: BlockBegin
    1: Push ^2,0,0
    2: Push ^2,0,1
    3: Alloc 2,0,2 (csv_file)
    4: Push @2,0,1 (csv_output)
    5: Push(lit) ">"
    6: FunctionCall (Fopen) arg count=2 is_statement=0
    7: Update(update) 2,0,2 (csv_file)
    8: Alloc 2,0,3 (duplicate_count)
    9: Push(lit) "0"
    10: Update(update) 2,0,3 (duplicate_count)
    11: Alloc 2,0,4 (dup_keys)
    12: Push @2,0,0 (dups_hash)
    13: FunctionCall (Keys) arg count=1 is_statement=0
    14: Update(update) 2,0,4 (dup_keys)
    15: Push @2,0,4 (dup_keys)
    16: FunctionCall (Sort) arg count=1 is_statement=1
    17: Pop
    18: Alloc 2,0,5 (dup_key)
    19: Alloc 2,0,6 ($temp54978)
    20: Push(lit) "0"
    21: Update(update) 2,0,6 ($temp54978)
    22: Foreach target: 0,5 collection: 0,4 index: 0,6 exit: 25
    23: Bl rtn=0:24 qual=[1, 1, 0, 26]
    24: J *22
    25: Pop
    26: Push @2,0,3 (duplicate_count)
    27: Return
    28: BlockEnd
Block Number: 1
    0: BlockBegin
    1: Push @2,0,0 (dups_hash)
    2: Push @2,0,5 (dup_key)
    3: FetchIndexed @2,0,0 indices=1 (])
    4: LengthOf @2,0,0 (#)
    5: Push(lit) "1"
    6: >
    7: Jf *9
    8: Bl rtn=1:9 qual=[0, 2, 0, 0]
    9: J *10
    10: BlockEnd
Block Number: 2
    0: BlockBegin
    1: Inc @2,0,3 (duplicate_count)
    2: Alloc 2,2,0 (dup_out)
    3: Push @2,0,5 (dup_key)
    4: Push(lit) ";"
    5: FunctionCall (Split) arg count=2 is_statement=0
    6: Update(update) 2,2,0 (dup_out)
    7: Alloc 2,2,1 (dup_fn)
    8: Push @2,2,0 (dup_out)
    9: Push(lit) "0"
    10: FetchIndexed @2,0,0 indices=1 (])
    11: Update(update) 2,2,1 (dup_fn)
    12: Alloc 2,2,2 (dup_date)
    13: Push @2,2,0 (dup_out)
    14: Push(lit) "1"
    15: FetchIndexed @2,0,0 indices=1 (])
    16: Push(lit) " "
    17: Concat
    18: Push @2,2,0 (dup_out)
    19: Push(lit) "2"
    20: FetchIndexed @2,0,0 indices=1 (])
    21: Concat
    22: Push(lit) " "
    23: Concat
    24: Push @2,2,0 (dup_out)
    25: Push(lit) "3"
    26: FetchIndexed @2,0,0 indices=1 (])
    27: Concat
    28: Push(lit) " "
    29: Concat
    30: Push @2,2,0 (dup_out)
    31: Push(lit) "4"
    32: FetchIndexed @2,0,0 indices=1 (])
    33: Concat
    34: Update(update) 2,2,2 (dup_date)
    35: Alloc 2,2,3 (dup_line)
    36: PushNewCollection(array) 2,0,0,0 ()
    37: Push @2,2,1 (dup_fn)
    38: Append
    39: Push @2,2,2 (dup_date)
    40: Append
    41: Update(update) 2,2,3 (dup_line)
    42: Alloc 2,2,4 (dupdirs)
    43: Push @2,0,0 (dups_hash)
    44: Push @2,0,5 (dup_key)
    45: FetchIndexed @2,0,0 indices=1 (])
    46: Update(update) 2,2,4 (dupdirs)
    47: Push @2,2,4 (dupdirs)
    48: AddEq(update) 2,2,3 (dup_line)
    49: Push @2,0,2 (csv_file)
    50: Push @2,2,3 (dup_line)
    51: FunctionCall (Fwriteln) arg count=2 is_statement=1
    52: Pop
    53: BlockEnd
thread 'main' panicked at cplvar/../allsources/cplvar.rs:1129:18:
From CplVar.as_string: Var is not a string, it's a CplUninitialized
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
carl@McTreehouse cpl % 
