entry transitions(args){
	if #args != 1{
		return "You must supply the file name.  trans.cpl usage:  run trans.cpl <file name>";
	}
	in_file = Fopen(args[0],"<");
	a = Freadln(in_file);
	in_comment = false;
	while !Feof(in_file){
		//	skip emmpty lines
		if #a == 0{
			a = Freadln(in_file);
			continue;
		}

		if in_comment {
			match = Match(a,"\\*/",0);
			if #match > 0{
				in_comment = false;
				a = Freadln(in_file);
				continue;
			}else{				
				a = Freadln(in_file);
				continue;
			}
		}

		match = Match(a,"/\\*",0);
		if #match > 0{
			in_comment = true;
			a = Freadln(in_file);
			continue;
		}

		match = Match(a,"^//.*",0);
		if #match > 0{
			a = Freadln(in_file);
			continue;
		}

		//(ParserStateTransitionKey::new(ParserState::Program,TokenCategory::FunctionDeclaration),
			// 	ParserStateTransitionContent::new(ParserState::Function, false, "function_declaration", Parser::function_declaration)),


		trans = Split(a,"/([ \\t;]+)/ ");

		do_nothing = "false";
		if trans[3] == "do_nothing"{
			do_nothing = "true";
		}

		if #trans > 0{
			println "(ParserStateTransitionKey::new(ParserState::".trans[0].",TokenCategory::".trans[1]."),";
			println "\tParserStateTransitionContent::new(ParserState::".trans[2].",".do_nothing.",".'"'.trans[3].'"'.",Parser::".trans[3].")),";
		}
		//println #trans;
		//println a;
		a = Freadln(in_file);
	}
	
}

