//  See Budget.xlsx and Quicken Monitored Monthly Report.  This is where the
//	data comes from.  The idea here is to absorb the budget and the result
//	of the last month's spending to produce a bottom line number representing
//	budget/over under.
//
//	Need to take it with a grain of salt because some spending is more intermitant
//	than other so, if there is an "under budget" number the extra money is not actually
//	available.
entry budget{
	budget_file = Fopen("/users/carl/McTreeHouse/FinancialStuff/Retirement/Budget.csv", "<,");
	budget_cat = " ";

	budget_dict = {};
	report_dict = {};
	loop{
		data = Freadln(budget_file);
		if Feof(budget_file){
			break;
		}

		if data[0] == "###"{
			break;
		}

		if data[0] == "@" || data[0] == "*"{
			budget_cat = data[1];
			continue;
		}

		if data[0] == "#"{
			budget_cat = " ";
			budget_key = data[1];
			budget_val = data[2];
			Insert(budget_dict, budget_key, budget_val, false);
			continue;
		}


		if data[0] == "-"{
			budget_key = budget_cat.":".data[1];
			budget_val = data[2];
			Insert(budget_dict,budget_key,budget_val, false);
			continue;
		}
	}

	if Feof(budget_file){
		return "Done!";
	}

	//println "//*****************  Start of Report ***************";

	report_cat_reg = Regex("^[\\w ]+$");
	report_detail_reg = Regex("^ - ([\\w\\d&/ ]*)");
	report_detail_so_reg = Regex("^[\\w\\d&/ ]*$"); 


	report_cat = " ";

	loop{
		report_line = Freadln(budget_file);
		if Feof(budget_file){
			break;
		}

		if report_line[0] != "!" || #report_line[2] == 0{
			continue;
		}


		match = Match(report_line[2], report_cat_reg, 0);

		//	If this looks like a category but the value column has
		//	data then it is a "stand-alone" category as opposed to
		//	sub category
		if #match > 0 && #report_line[3] == 0{
			report_cat = report_line[2];
			continue;
		}

		capture = Capture(report_line[2], report_detail_so_reg, 0);
		if #capture > 0{
			report_key = report_line[2];
			if report_line[3] == "0"{
				Insert(report_dict, report_key, report_line[3], false);
				continue;
			}

			report_val = Replace(report_line[3], ",", "", 0) * -1;
			Insert(report_dict, report_key, report_val, false);
			report_cat = " ";
			continue;
		}

		capture = Capture(report_line[2], report_detail_reg, 0);		
		if #capture > 0{
			report_key = report_cat.":".capture[1]; 
			report_val = Replace(report_line[3], ",", "", 0) * -1;
			Insert(report_dict,report_key,report_val, false);
			continue;		
		}
	}
	analyze(budget_dict, report_dict);
}

fn analyze(budget, report){
	totals = {};
	budget_keys = Keys(budget);
	total_diff = 0;

	foreach budget_key budget_keys{
		if Contains(report,budget_key){
			diff = budget[budget_key] - report[budget_key];
			Insert(totals, budget_key, diff, false);
			total_diff += diff;
		}else{
			Insert(totals, budget_key, 0, false);
		}
	}

	total_keys = Keys(totals);
	Sort(total_keys);
	foreach total_key total_keys{
		println total_key.",".totals[total_key];
	}
	println "total diff,".total_diff;
}